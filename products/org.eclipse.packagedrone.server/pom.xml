<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<parent>
		<groupId>org.eclipse.packagedrone</groupId>
		<artifactId>parent</artifactId>
		<version>0.11.4-SNAPSHOT</version>
		<relativePath>../..</relativePath>
	</parent>

	<version>0.11.4</version>
	<groupId>org.eclipse.packagedrone.products</groupId>
	<artifactId>org.eclipse.packagedrone.server</artifactId>
	<packaging>eclipse-repository</packaging>

	<properties>

		<rpm.baseRelease>${releasePhase.phase}</rpm.baseRelease> <!-- by the release-version:phase goal -->

		<rpm.baseVersion>${parsedVersion.majorVersion}.${parsedVersion.minorVersion}.${parsedVersion.incrementalVersion}</rpm.baseVersion>

		<productName>org.eclipse.packagedrone.server</productName>
		<drone.user>pdrone</drone.user>
		<drone.group>pdrone</drone.group>
		<drone.app.name>package-drone-server</drone.app.name>
		
		<drone.user.description>Package Drone daemon user</drone.user.description>
	</properties>

	<build>
		<plugins>

			<plugin>
				<groupId>de.dentrassi.build</groupId>
				<artifactId>release-version</artifactId>
				<version>0.0.8</version>
				<executions>
				    <execution>
				        <goals>
				            <goal>phase</goal>
				        </goals>
				    </execution>
				</executions>
				<configuration>
				    <snapshotPhase>0</snapshotPhase>
				    <rules>
				        <rule>
				            <pattern>m([0-9]+)</pattern>
				            <phase>1.$1</phase>
				        </rule>
				        <rule>
                            <pattern>rc([0-9]+)</pattern>
                            <phase>2.$1</phase>
                        </rule>
				    </rules>
				    <defaultPhase>3</defaultPhase>
				</configuration>
			</plugin>

			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>build-helper-maven-plugin</artifactId>
				<version>1.9.1</version>
				<executions>
					<execution>
						<id>parse-version</id>
						<goals>
							<goal>parse-version</goal>
						</goals>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<groupId>org.eclipse.tycho</groupId>
				<artifactId>tycho-p2-repository-plugin</artifactId>
				<version>${tycho-version}</version>
				<configuration>
					<includeAllDependencies>true</includeAllDependencies>
				</configuration>
			</plugin>

			<plugin>
				<groupId>org.eclipse.tycho</groupId>
				<artifactId>tycho-p2-director-plugin</artifactId>
				<version>${tycho-version}</version>
				<configuration>
					<formats>
						<win32>zip</win32>
						<linux>tar.gz</linux>
						<macosx>tar.gz</macosx>
					</formats>
				</configuration>
				<executions>
					<execution>
						<id>materialize-products</id>
						<goals>
							<goal>materialize-products</goal>
						</goals>
					</execution>
					<execution>
						<id>archive-products</id>
						<goals>
							<goal>archive-products</goal>
						</goals>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-antrun-plugin</artifactId>
				<executions>
					<execution>
						<phase>package</phase>
						<configuration>
							<target>
								<copy
									file="${project.build.directory}/products/${productName}-all.all.all.zip"
									tofile="${project.build.directory}/${project.artifactId}-${project.version}.zip" />
							</target>
						</configuration>
						<goals>
							<goal>run</goal>
						</goals>
					</execution>
				</executions>
			</plugin>

			<!-- jdeb -->

			<plugin>
				<artifactId>jdeb</artifactId>
				<groupId>org.vafer</groupId>
				<version>1.3</version>
				<executions>
					<execution>
						<phase>package</phase>
						<goals>
							<goal>jdeb</goal>
						</goals>
						<configuration>
							<snapshotExpand>true</snapshotExpand>
							<dataSet>
								<data>
									<!-- we need a tar.gz for permissions -->
									<src>${project.build.directory}/products/${productName}-linux.all.all.tar.gz</src>
									<type>archive</type>
									<mapper>
										<type>perm</type>
										<prefix>/usr/lib/${drone.app.name}/instance</prefix>
										<user>${drone.user}</user>
										<group>${drone.group}</group>
									</mapper>
								</data>

								<data>
									<src>src/default/${drone.app.name}</src>
									<dst>etc/default/${drone.app.name}</dst>
									<type>file</type>
									<conffile>true</conffile>
									<mapper>
										<type>perm</type>
										<user>root</user>
										<group>root</group>
									</mapper>
								</data>

								<data>
									<src>src/default/profile</src>
									<dst>usr/lib/${drone.app.name}/profile</dst>
									<type>file</type>
									<conffile>false</conffile>
									<mapper>
										<type>perm</type>
										<user>root</user>
										<group>root</group>
									</mapper>
								</data>

								<data>
									<src>src/deb/${drone.app.name}.conf</src>
									<dst>etc/init/${drone.app.name}.conf</dst>
									<type>file</type>
									<conffile>true</conffile>
									<mapper>
										<type>perm</type>
										<user>root</user>
										<group>root</group>
									</mapper>
								</data>

								<data>
									<type>template</type>
									<paths>
										<path>var/lib/${drone.app.name}</path>
									</paths>
									<mapper>
										<type>perm</type>
										<user>${drone.user}</user>
										<group>${drone.group}</group>
										<dirmode>0750</dirmode>
									</mapper>
								</data>

								<data>
									<src>src/deb/copyright</src>
									<dst>usr/share/doc/${project.artifactId}/copyright</dst>
									<type>file</type>
									<mapper>
										<type>perm</type>
										<user>root</user>
										<group>root</group>
									</mapper>
								</data>

								<data>
									<src>src/deb/lintian-overrides</src>
									<dst>usr/share/lintian/overrides/${project.artifactId}</dst>
									<type>file</type>
									<mapper>
										<type>perm</type>
										<user>root</user>
										<group>root</group>
									</mapper>
								</data>
							</dataSet>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>rpm-maven-plugin</artifactId>
				<version>2.1.4</version>

				<configuration>
					<license>EPL</license>
					<distribution>Package Drone</distribution>
					<summary>An extensible software artifact repository</summary>
					<url>http://packagedrone.org</url>
					<group>System Environment/Daemons</group>

					<defaultUsername>root</defaultUsername>
					<defaultGroupname>root</defaultGroupname>

					<projversion>${rpm.baseVersion}</projversion>
					<release>${rpm.baseRelease}.%{?dist}</release>
				</configuration>

				<executions>
				
				    <!-- centos 7 -->
				
					<execution>
						<id>attach-rpm-centos7</id>
						<phase>package</phase>
						<goals>
							<goal>attached-rpm</goal>
						</goals>
						<configuration>

							<defineStatements>
								<defineStatement>dist el7</defineStatement>
							</defineStatements>

							<workarea>${project.build.directory}/rpm.el7</workarea>

                            <conflicts>
                                <conflict>package-drone-server</conflict>
                            </conflicts>

                            <prereqs>
                                <!-- for the command "getent" -->
                                <require>glibc-common</require>

                                <!-- for the "adduser" scripts -->
                                <prereq>shadow-utils</prereq>
                            </prereqs>

							<requires>
								<require>systemd</require>
								<require>firewalld</require>

								<require>jre-headless &gt;= 1.8.0</require>
							</requires>

							<distribution>centos7</distribution>

							<mappings>

								<mapping>
									<directory>/usr/lib/${drone.app.name}</directory>
									<username>${drone.user}</username>
									<groupname>${drone.group}</groupname>
								</mapping>

								<mapping>
									<directory>/usr/lib/${drone.app.name}/instance</directory>
									<username>${drone.user}</username>
									<groupname>${drone.group}</groupname>
									<sources>
										<source>
											<location>target/products/${productName}/all/all/all</location>
											<excludes>
												<exclude>eclipse.ini</exclude><!-- not needed -->
											</excludes>
										</source>
									</sources>
								</mapping>

								<mapping>
									<directory>/etc/default</directory>
									<directoryIncluded>false</directoryIncluded>
									<configuration>true</configuration>
									<username>root</username>
									<groupname>root</groupname>
									<sources>
										<source>
											<location>src/default/${drone.app.name}</location>
										</source>
									</sources>
								</mapping>

								<mapping>
									<directory>/usr/lib/${drone.app.name}</directory>
									<username>root</username>
									<groupname>root</groupname>
									<configuration>false</configuration>
									<sources>
										<source>
											<location>src/default/profile</location>
										</source>
									</sources>
								</mapping>

								<mapping>
									<directory>/usr/lib/systemd/system</directory>
									<username>root</username>
									<groupname>root</groupname>
									<directoryIncluded>false</directoryIncluded>
									<sources>
										<source>
											<location>src/systemd</location>
										</source>
									</sources>
								</mapping>

								<mapping>
									<directory>/etc/firewalld/services</directory>
									<configuration>true</configuration>
									<username>root</username>
									<groupname>root</groupname>
									<filemode>0640</filemode>
									<directoryIncluded>false</directoryIncluded>
									<sources>
										<source>
											<location>src/firewalld/${drone.app.name}.xml</location>
										</source>
									</sources>
								</mapping>

								<mapping>
									<directory>/var/lib/${drone.app.name}</directory>
									<username>${drone.user}</username>
									<groupname>${drone.group}</groupname>
									<directoryIncluded>true</directoryIncluded>
									<filemode>0750</filemode>
								</mapping>

							</mappings>

							<preinstallScriptlet>
								<script><![CDATA[
if ! getent passwd "${drone.user}" >/dev/null; then
    # create new user
    useradd --system --user-group --home "/var/lib/${drone.app.name}" --comment "${drone.user.description}" "${drone.user}"
fi
mkdir -p "/var/lib/${drone.app.name}"
chown -R "${drone.user}:${drone.group}" "/var/lib/${drone.app.name}"
]]></script>
							</preinstallScriptlet>

							<postinstallScriptlet>
								<script><![CDATA[
if [ $1 -eq 1 ] ; then
    systemctl preset "${drone.app.name}.service" >/dev/null 2>&1 || :
    /usr/bin/firewall-cmd --reload >/dev/null || :
    /usr/bin/firewall-cmd --permanent --add-service="${drone.app.name}" >/dev/null || :
    /usr/bin/firewall-cmd --reload >/dev/null || :
else
    systemctl try-restart "${drone.app.name}" >/dev/null || :
fi
]]></script>
							</postinstallScriptlet>

							<preremoveScriptlet>
								<script><![CDATA[
if [ $1 -eq 0 ] ; then
    systemctl --no-reload disable "${drone.app.name}.service" > /dev/null 2>&1 || :
    systemctl stop "${drone.app.name}" > /dev/null 2>&1 || :
fi
]]>
								</script>
							</preremoveScriptlet>

							<postremoveScriptlet>
								<script><![CDATA[
if [ "$1" -eq 0 ]; then
    # this is the final uninstall
    if which userdel >/dev/null 2>&1; then
        userdel "${drone.user}" > /dev/null || :
    fi
    # delete group if it still exists
    getent group "${drone.group}">/dev/null && groupdel "${drone.group}" > /dev/null || :
    
    /usr/bin/firewall-cmd --permanent --remove-service="${drone.app.name}" > /dev/null || :
    /usr/bin/firewall-cmd --reload > /dev/null || :
fi

systemctl daemon-reload >/dev/null 2>&1 || :
]]></script>
							</postremoveScriptlet>

						</configuration>
					</execution>
					
					<!-- opensuse 13 -->
					
                    <execution>
                        <id>attach-rpm-opensuse13</id>
                        <phase>package</phase>
                        <goals>
                            <goal>attached-rpm</goal>
                        </goals>
                        <configuration>

                            <defineStatements>
                                <defineStatement>dist os13</defineStatement>
                            </defineStatements>

                            <workarea>${project.build.directory}/rpm.os13</workarea>

                            <conflicts>
                                <conflict>package-drone-server</conflict>
                            </conflicts>

                            <prereqs>
                                <!-- for the command "getent" -->
                                <require>glibc</require>

                                <!-- for the "adduser" scripts -->
                                <prereq>pwdutils</prereq>
                            </prereqs>

                            <requires>
                                <require>systemd</require>

                                <require>jre-headless &gt;= 1.8.0</require>
                            </requires>

                            <distribution>os13</distribution>

                            <mappings>

                                <mapping>
                                    <directory>/usr/lib/${drone.app.name}</directory>
                                    <username>${drone.user}</username>
                                    <groupname>${drone.group}</groupname>
                                </mapping>

                                <mapping>
                                    <directory>/usr/lib/${drone.app.name}/instance</directory>
                                    <username>${drone.user}</username>
                                    <groupname>${drone.group}</groupname>
                                    <sources>
                                        <source>
                                            <location>target/products/${productName}/all/all/all</location>
                                            <excludes>
                                                <exclude>eclipse.ini</exclude><!-- not needed -->
                                            </excludes>
                                        </source>
                                    </sources>
                                </mapping>

                                <mapping>
                                    <directory>/etc/default</directory>
                                    <directoryIncluded>false</directoryIncluded>
                                    <configuration>true</configuration>
                                    <username>root</username>
                                    <groupname>root</groupname>
                                    <sources>
                                        <source>
                                            <location>src/default/${drone.app.name}</location>
                                        </source>
                                    </sources>
                                </mapping>

                                <mapping>
                                    <directory>/usr/lib/${drone.app.name}</directory>
                                    <username>root</username>
                                    <groupname>root</groupname>
                                    <configuration>false</configuration>
                                    <sources>
                                        <source>
                                            <location>src/default/profile</location>
                                        </source>
                                    </sources>
                                </mapping>

                                <mapping>
                                    <directory>/usr/lib/systemd/system</directory>
                                    <username>root</username>
                                    <groupname>root</groupname>
                                    <directoryIncluded>false</directoryIncluded>
                                    <sources>
                                        <source>
                                            <location>src/systemd</location>
                                        </source>
                                    </sources>
                                </mapping>

                                <mapping>
                                    <directory>/etc/sysconfig/SuSEfirewall2.d/services</directory>
                                    <configuration>true</configuration>
                                    <username>root</username>
                                    <groupname>root</groupname>
                                    <filemode>0640</filemode>
                                    <directoryIncluded>false</directoryIncluded>
                                    <sources>
                                        <source>
                                            <location>src/susefw/${drone.app.name}</location>
                                        </source>
                                    </sources>
                                </mapping>

                                <mapping>
                                    <directory>/var/lib/${drone.app.name}</directory>
                                    <username>${drone.user}</username>
                                    <groupname>${drone.group}</groupname>
                                    <directoryIncluded>true</directoryIncluded>
                                    <filemode>0750</filemode>
                                </mapping>

                            </mappings>

                            <preinstallScriptlet>
                                <script><![CDATA[
if ! getent passwd "${drone.user}" >/dev/null; then
    # create new user
    useradd --system --user-group --home "/var/lib/${drone.app.name}" --comment "${drone.user.description}" "${drone.user}"
fi
mkdir -p "/var/lib/${drone.app.name}"
chown -R "${drone.user}:${drone.group}" "/var/lib/${drone.app.name}"
]]></script>
                            </preinstallScriptlet>

                            <postinstallScriptlet>
                                <script><![CDATA[
if [ $1 -eq 1 ] ; then
    systemctl preset "${drone.app.name}.service" >/dev/null 2>&1 || :
else
    systemctl try-restart "${drone.app.name}" >/dev/null || :
fi
]]></script>
                            </postinstallScriptlet>

                            <preremoveScriptlet>
                                <script><![CDATA[
if [ $1 -eq 0 ] ; then
    systemctl --no-reload disable "${drone.app.name}.service" > /dev/null 2>&1 || :
    systemctl stop "${drone.app.name}" > /dev/null 2>&1 || :
fi
]]>
                                </script>
                            </preremoveScriptlet>

                            <postremoveScriptlet>
                                <script><![CDATA[
if [ "$1" -eq 0 ]; then
    # this is the final uninstall
    if which userdel >/dev/null 2>&1; then
        userdel "${drone.user}" > /dev/null || :
    fi
    # delete group if it still exists
    getent group "${drone.group}">/dev/null && groupdel "${drone.group}" > /dev/null || :
fi

systemctl daemon-reload >/dev/null 2>&1 || :
]]></script>
                            </postremoveScriptlet>

                        </configuration>
                    </execution>

					<!-- centos 6 -->

					<execution>
						<id>attach-rpm-centos6</id>
						<phase>package</phase>
						<goals>
							<goal>attached-rpm</goal>
						</goals>
						<configuration>

							<defineStatements>
								<defineStatement>dist el6</defineStatement>
							</defineStatements>

							<workarea>${project.build.directory}/rpm.el6</workarea>

                            <conflicts>
                                <conflict>package-drone-server</conflict>
                            </conflicts>

							<prereqs>
								<!-- for the command "getent" -->
								<require>glibc-common</require>

								<!-- for the "adduser" scripts -->
								<prereq>shadow-utils</prereq>
							</prereqs>

							<requires>
								<require>lsb-core-noarch &gt;= 4.0</require>
							</requires>

							<distribution>centos6</distribution>

							<mappings>

								<mapping>
									<directory>/etc/init.d</directory>
									<configuration>true</configuration>
									<username>root</username>
									<groupname>root</groupname>
									<filemode>07550</filemode>
									<directoryIncluded>false</directoryIncluded>
									<sources>
										<source>
											<location>src/sysv/${drone.app.name}</location>
										</source>
									</sources>
								</mapping>

								<mapping>
									<directory>/usr/lib/${drone.app.name}</directory>
									<username>${drone.user}</username>
									<groupname>${drone.group}</groupname>
								</mapping>

								<mapping>
									<directory>/usr/lib/${drone.app.name}/instance</directory>
									<username>${drone.user}</username>
									<groupname>${drone.group}</groupname>
									<sources>
										<source>
											<location>target/products/${productName}/all/all/all</location>
											<excludes>
												<exclude>eclipse.ini</exclude><!-- not needed -->
											</excludes>
										</source>
									</sources>
								</mapping>

								<mapping>
									<directory>/var/run/${drone.app.name}</directory>
									<username>${drone.user}</username>
									<groupname>${drone.group}</groupname>
									<filemode>0750</filemode>
								</mapping>

								<mapping>
									<directory>/etc/default</directory>
									<directoryIncluded>false</directoryIncluded>
									<configuration>true</configuration>
									<username>root</username>
									<groupname>root</groupname>
									<sources>
										<source>
											<location>src/default/${drone.app.name}</location>
										</source>
									</sources>
								</mapping>

								<mapping>
									<directory>/usr/lib/${drone.app.name}</directory>
									<username>root</username>
									<groupname>root</groupname>
									<configuration>false</configuration>
									<sources>
										<source>
											<location>src/default/profile</location>
										</source>
									</sources>
								</mapping>

								<mapping>
									<directory>/var/lib/${drone.app.name}</directory>
									<username>${drone.user}</username>
									<groupname>${drone.group}</groupname>
									<directoryIncluded>true</directoryIncluded>
									<filemode>0750</filemode>
								</mapping>

							</mappings>

							<preinstallScriptlet>
								<script><![CDATA[
if ! getent passwd "${drone.user}" >/dev/null; then
    # create new user
    useradd --system --user-group --shell /sbin/nologin --home "/var/lib/${drone.app.name}" --comment "${drone.user.description}" "${drone.user}"
fi
mkdir -p "/var/lib/${drone.app.name}"
chown -R "${drone.user}:${drone.group}" "/var/lib/${drone.app.name}"

test -x "/etc/init.d/${drone.app.name}" && "/etc/init.d/${drone.app.name}" stop || :
]]></script>
							</preinstallScriptlet>

							<postinstallScriptlet>
								<script><![CDATA[
/sbin/chkconfig --add "${drone.app.name}"
/sbin/chkconfig "${drone.app.name}" && "/etc/init.d/${drone.app.name}" start || :
]]></script>
							</postinstallScriptlet>

							<preremoveScriptlet>
								<script><![CDATA[
if [ "$1" -eq 0 ] ; then
    chkconfig --del "${drone.app.name}" || :
    "/etc/init.d/${drone.app.name}" stop || :
fi
]]>
								</script>
							</preremoveScriptlet>

							<postremoveScriptlet>
								<script><![CDATA[
if [ "$1" -eq 0 ]; then
    # this is the final uninstall
    if which userdel >/dev/null 2>&1; then
        userdel "${drone.user}" > /dev/null || :
    fi
    # delete group if it still exists
    getent group "${drone.group}">/dev/null && groupdel "${drone.group}" > /dev/null || :
fi
]]></script>
							</postremoveScriptlet>

						</configuration>
					</execution>

				</executions>
			</plugin>

		</plugins>
	</build>

	<profiles>
		<profile>
			<id>jdeb-sign</id>
			<activation>
				<activeByDefault>false</activeByDefault>
			</activation>

			<build>
				<plugins>
					<plugin>
						<artifactId>jdeb</artifactId>
						<groupId>org.vafer</groupId>
						<version>1.3</version>
						<configuration>
							<signPackage>true</signPackage>
						</configuration>
					</plugin>

					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>exec-maven-plugin</artifactId>
						<version>1.3.2</version>
						<executions>
							<execution>
								<id>sign-el7</id>
								<phase>package</phase>
								<goals>
									<goal>exec</goal>
								</goals>
								<configuration>
									<executable>bash</executable>
									<arguments>
										<argument>-c</argument>
										<argument><![CDATA[echo "" | rpmsign --addsign "${project.build.directory}/rpm.el7/${project.artifactId}/RPMS/noarch/${project.artifactId}-${rpm.baseVersion}-${rpm.baseRelease}.el7.noarch.rpm" && cp "${project.build.directory}/rpm.el7/${project.artifactId}/RPMS/noarch/${project.artifactId}-${rpm.baseVersion}-${rpm.baseRelease}.el7.noarch.rpm" ${project.build.directory}/]]></argument>
									</arguments>
								</configuration>
							</execution>
							<execution>
								<id>sign-el6</id>
								<phase>package</phase>
								<goals>
									<goal>exec</goal>
								</goals>
								<configuration>
									<executable>bash</executable>
									<arguments>
										<argument>-c</argument>
										<argument><![CDATA[echo "" | rpmsign --addsign "${project.build.directory}/rpm.el6/${project.artifactId}/RPMS/noarch/${project.artifactId}-${rpm.baseVersion}-${rpm.baseRelease}.el6.noarch.rpm" && cp "${project.build.directory}/rpm.el6/${project.artifactId}/RPMS/noarch/${project.artifactId}-${rpm.baseVersion}-${rpm.baseRelease}.el6.noarch.rpm" ${project.build.directory}/ ]]></argument>
									</arguments>
								</configuration>
							</execution>
                            <execution>
                                <id>sign-os13</id>
                                <phase>package</phase>
                                <goals>
                                    <goal>exec</goal>
                                </goals>
                                <configuration>
                                    <executable>bash</executable>
                                    <arguments>
                                        <argument>-c</argument>
                                        <argument><![CDATA[echo "" | rpmsign --addsign "${project.build.directory}/rpm.os13/${project.artifactId}/RPMS/noarch/${project.artifactId}-${rpm.baseVersion}-${rpm.baseRelease}.os13.noarch.rpm" && cp "${project.build.directory}/rpm.os13/${project.artifactId}/RPMS/noarch/${project.artifactId}-${rpm.baseVersion}-${rpm.baseRelease}.os13.noarch.rpm" ${project.build.directory}/ ]]></argument>
                                    </arguments>
                                </configuration>
                            </execution>
						</executions>

					</plugin>

				</plugins>
			</build>

		</profile>

	</profiles>

</project>
